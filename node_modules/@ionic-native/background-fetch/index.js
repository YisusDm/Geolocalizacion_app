var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BackgroundFetchOriginal = /** @class */ (function (_super) {
    __extends(BackgroundFetchOriginal, _super);
    function BackgroundFetchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundFetchOriginal.prototype.configure = function (config) { return cordova(this, "configure", { "callbackOrder": "reverse" }, arguments); };
    BackgroundFetchOriginal.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundFetchOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundFetchOriginal.prototype.finish = function (taskId) { return cordova(this, "finish", { "sync": true }, arguments); };
    BackgroundFetchOriginal.prototype.status = function () { return cordova(this, "status", {}, arguments); };
    BackgroundFetchOriginal.pluginName = "BackgroundFetch";
    BackgroundFetchOriginal.plugin = "cordova-plugin-background-fetch";
    BackgroundFetchOriginal.pluginRef = "BackgroundFetch";
    BackgroundFetchOriginal.repo = "https://github.com/transistorsoft/cordova-plugin-background-fetch";
    BackgroundFetchOriginal.platforms = ["iOS"];
    return BackgroundFetchOriginal;
}(IonicNativePlugin));
var BackgroundFetch = new BackgroundFetchOriginal();
export { BackgroundFetch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhY2tncm91bmQtZmV0Y2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBNERuQyxtQ0FBaUI7Ozs7SUFVcEQsbUNBQVMsYUFBQyxNQUE2QjtJQVV2QywrQkFBSztJQVNMLDhCQUFJO0lBVUosZ0NBQU0sYUFBQyxNQUFjO0lBT3JCLGdDQUFNOzs7Ozs7MEJBMUdSO0VBNERxQyxpQkFBaUI7U0FBekMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tncm91bmRGZXRjaENvbmZpZyB7XG4gIC8qKlxuICAgKiBTZXQgdHJ1ZSB0byBjZWFzZSBiYWNrZ3JvdW5kLWZldGNoIGZyb20gb3BlcmF0aW5nIGFmdGVyIHVzZXIgXCJjbG9zZXNcIiB0aGUgYXBwLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgKi9cbiAgc3RvcE9uVGVybWluYXRlPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBCYWNrZ3JvdW5kIEZldGNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIGlPUyBCYWNrZ3JvdW5kIEZldGNoIEltcGxlbWVudGF0aW9uLiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9yZWZlcmVuY2UvdWlraXQvdWlhcHBsaWNhdGlvbiMxNjU3Mzk5XG4gKiBpT1MgQmFja2dyb3VuZCBGZXRjaCBpcyBiYXNpY2FsbHkgYW4gQVBJIHdoaWNoIHdha2VzIHVwIHlvdXIgYXBwIGFib3V0IGV2ZXJ5IDE1IG1pbnV0ZXMgKGR1cmluZyB0aGUgdXNlcidzIHByaW1lLXRpbWUgaG91cnMpIGFuZCBwcm92aWRlcyB5b3VyIGFwcCBleGFjdGx5IDMwcyBvZiBiYWNrZ3JvdW5kIHJ1bm5pbmctdGltZS4gVGhpcyBwbHVnaW4gd2lsbCBleGVjdXRlIHlvdXIgcHJvdmlkZWQgY2FsbGJhY2tGbiB3aGVuZXZlciBhIGJhY2tncm91bmQtZmV0Y2ggZXZlbnQgb2NjdXJzLiBUaGVyZSBpcyBubyB3YXkgdG8gaW5jcmVhc2UgdGhlIHJhdGUgd2hpY2ggYSBmZXRjaC1ldmVudCBvY2N1cnMgYW5kIHRoaXMgcGx1Z2luIHNldHMgdGhlIHJhdGUgdG8gdGhlIG1vc3QgZnJlcXVlbnQgcG9zc2libGUgdmFsdWUgb2YgVUlBcHBsaWNhdGlvbkJhY2tncm91bmRGZXRjaEludGVydmFsTWluaW11bSAtLSBpT1MgZGV0ZXJtaW5lcyB0aGUgcmF0ZSBhdXRvbWF0aWNhbGx5IGJhc2VkIHVwb24gZGV2aWNlIHVzYWdlIGFuZCB0aW1lLW9mLWRheSAoaWU6IGZldGNoLXJhdGUgaXMgYWJvdXQgfjE1bWluIGR1cmluZyBwcmltZS10aW1lIGhvdXJzOyBsZXNzIGZyZXF1ZW50bHkgd2hlbiB0aGUgdXNlciBpcyBwcmVzdW1lZCB0byBiZSBzbGVlcGluZywgYXQgM2FtIGZvciBleGFtcGxlKS5cbiAqIEZvciBtb3JlIGRldGFpbCwgcGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHJhbnNpc3RvcnNvZnQvY29yZG92YS1wbHVnaW4tYmFja2dyb3VuZC1mZXRjaFxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhY2tncm91bmRGZXRjaCwgQmFja2dyb3VuZEZldGNoQ29uZmlnIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9iYWNrZ3JvdW5kLWZldGNoL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFja2dyb3VuZEZldGNoOiBCYWNrZ3JvdW5kRmV0Y2gpIHtcbiAqXG4gKiAgIGNvbnN0IGNvbmZpZzogQmFja2dyb3VuZEZldGNoQ29uZmlnID0ge1xuICogICAgIHN0b3BPblRlcm1pbmF0ZTogZmFsc2UsIC8vIFNldCB0cnVlIHRvIGNlYXNlIGJhY2tncm91bmQtZmV0Y2ggZnJvbSBvcGVyYXRpbmcgYWZ0ZXIgdXNlciBcImNsb3Nlc1wiIHRoZSBhcHAuIERlZmF1bHRzIHRvIHRydWUuXG4gKiAgIH1cbiAqXG4gKiAgIGJhY2tncm91bmRGZXRjaC5jb25maWd1cmUoY29uZmlnKVxuICogICAgICAudGhlbigoKSA9PiB7XG4gKiAgICAgICAgICBjb25zb2xlLmxvZygnQmFja2dyb3VuZCBGZXRjaCBpbml0aWFsaXplZCcpO1xuICpcbiAqICAgICAgICAgIHRoaXMuYmFja2dyb3VuZEZldGNoLmZpbmlzaCgpO1xuICpcbiAqICAgICAgfSlcbiAqICAgICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coJ0Vycm9yIGluaXRpYWxpemluZyBiYWNrZ3JvdW5kIGZldGNoJywgZSkpO1xuICpcbiAqICAgLy8gU3RhcnQgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJLiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIGJlIGV4ZWN1dGVkIGVhY2ggdGltZSBhIGJhY2tncm91bmQtZmV0Y2ggZXZlbnQgb2NjdXJzLiBOT1RFIHRoZSAjY29uZmlndXJlIG1ldGhvZCBhdXRvbWF0aWNhbGx5IGNhbGxzICNzdGFydC4gWW91IGRvIG5vdCBoYXZlIHRvIGNhbGwgdGhpcyBtZXRob2QgYWZ0ZXIgeW91ICNjb25maWd1cmUgdGhlIHBsdWdpblxuICogICBiYWNrZ3JvdW5kRmV0Y2guc3RhcnQoKTtcbiAqXG4gKiAgIC8vIFN0b3AgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJIGZyb20gZmlyaW5nIGZldGNoIGV2ZW50cy4gWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBubyBsb25nZXIgYmUgZXhlY3V0ZWQuXG4gKiAgIGJhY2tncm91bmRGZXRjaC5zdG9wKCk7XG4gKlxuICpcbiAqIH1cbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBCYWNrZ3JvdW5kRmV0Y2hDb25maWdcbiAqXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQmFja2dyb3VuZEZldGNoJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYmFja2dyb3VuZC1mZXRjaCcsXG4gIHBsdWdpblJlZjogJ0JhY2tncm91bmRGZXRjaCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdHJhbnNpc3RvcnNvZnQvY29yZG92YS1wbHVnaW4tYmFja2dyb3VuZC1mZXRjaCcsXG4gIHBsYXRmb3JtczogWydpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZEZldGNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgcGx1Z2luJ3MgZmV0Y2ggY2FsbGJhY2tGblxuICAgKlxuICAgKiBAcGFyYW0ge0JhY2tncm91bmRGZXRjaENvbmZpZ30gY29uZmlnIENvbmZpZ3VyYXRpb24gZm9yIHBsdWdpblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBjb25maWd1cmUoY29uZmlnOiBCYWNrZ3JvdW5kRmV0Y2hDb25maWcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkuXG4gICAqIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgYmUgZXhlY3V0ZWQgZWFjaCB0aW1lIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIE5PVEUgdGhlICNjb25maWd1cmUgbWV0aG9kIGF1dG9tYXRpY2FsbHkgY2FsbHMgI3N0YXJ0LiBZb3UgZG8gbm90IGhhdmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBhZnRlciB5b3UgI2NvbmZpZ3VyZSB0aGUgcGx1Z2luXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJIGZyb20gZmlyaW5nIGZldGNoIGV2ZW50cy4gWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBubyBsb25nZXIgYmUgZXhlY3V0ZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3AoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogWW91IE1VU1QgY2FsbCB0aGlzIG1ldGhvZCBpbiB5b3VyIGZldGNoIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSBpbiBvcmRlciB0byBzaWduYWwgdG8gaU9TIHRoYXQgeW91ciBmZXRjaCBhY3Rpb24gaXMgY29tcGxldGUuIGlPUyBwcm92aWRlcyBvbmx5IDMwcyBvZiBiYWNrZ3JvdW5kLXRpbWUgZm9yIGEgZmV0Y2gtZXZlbnQgLS0gaWYgeW91IGV4Y2VlZCB0aGlzIDMwcywgaU9TIHdpbGwga2lsbCB5b3VyIGFwcC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBmaW5pc2godGFza0lkOiBzdHJpbmcpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgc3RhdHVzIG9mIHRoZSBiYWNrZ3JvdW5kLWZldGNoXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXR1cygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19