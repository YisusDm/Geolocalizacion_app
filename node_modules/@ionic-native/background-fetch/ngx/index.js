import { __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var BackgroundFetch = /** @class */ (function (_super) {
    __extends(BackgroundFetch, _super);
    function BackgroundFetch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundFetch.prototype.configure = function (config) { return cordova(this, "configure", { "callbackOrder": "reverse" }, arguments); };
    BackgroundFetch.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundFetch.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundFetch.prototype.finish = function (taskId) { return cordova(this, "finish", { "sync": true }, arguments); };
    BackgroundFetch.prototype.status = function () { return cordova(this, "status", {}, arguments); };
    BackgroundFetch.pluginName = "BackgroundFetch";
    BackgroundFetch.plugin = "cordova-plugin-background-fetch";
    BackgroundFetch.pluginRef = "BackgroundFetch";
    BackgroundFetch.repo = "https://github.com/transistorsoft/cordova-plugin-background-fetch";
    BackgroundFetch.platforms = ["iOS"];
    BackgroundFetch.decorators = [
        { type: Injectable }
    ];
    return BackgroundFetch;
}(IonicNativePlugin));
export { BackgroundFetch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhY2tncm91bmQtZmV0Y2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBMkROLG1DQUFpQjs7OztJQVVwRCxtQ0FBUyxhQUFDLE1BQTZCO0lBVXZDLCtCQUFLO0lBU0wsOEJBQUk7SUFVSixnQ0FBTSxhQUFDLE1BQWM7SUFPckIsZ0NBQU07Ozs7Ozs7Z0JBL0NQLFVBQVU7OzBCQTNEWDtFQTREcUMsaUJBQWlCO1NBQXpDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBCYWNrZ3JvdW5kRmV0Y2hDb25maWcge1xuICAvKipcbiAgICogU2V0IHRydWUgdG8gY2Vhc2UgYmFja2dyb3VuZC1mZXRjaCBmcm9tIG9wZXJhdGluZyBhZnRlciB1c2VyIFwiY2xvc2VzXCIgdGhlIGFwcC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICovXG4gIHN0b3BPblRlcm1pbmF0ZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgQmFja2dyb3VuZCBGZXRjaFxuICogQGRlc2NyaXB0aW9uXG4gKiBpT1MgQmFja2dyb3VuZCBGZXRjaCBJbXBsZW1lbnRhdGlvbi4gU2VlOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vcmVmZXJlbmNlL3Vpa2l0L3VpYXBwbGljYXRpb24jMTY1NzM5OVxuICogaU9TIEJhY2tncm91bmQgRmV0Y2ggaXMgYmFzaWNhbGx5IGFuIEFQSSB3aGljaCB3YWtlcyB1cCB5b3VyIGFwcCBhYm91dCBldmVyeSAxNSBtaW51dGVzIChkdXJpbmcgdGhlIHVzZXIncyBwcmltZS10aW1lIGhvdXJzKSBhbmQgcHJvdmlkZXMgeW91ciBhcHAgZXhhY3RseSAzMHMgb2YgYmFja2dyb3VuZCBydW5uaW5nLXRpbWUuIFRoaXMgcGx1Z2luIHdpbGwgZXhlY3V0ZSB5b3VyIHByb3ZpZGVkIGNhbGxiYWNrRm4gd2hlbmV2ZXIgYSBiYWNrZ3JvdW5kLWZldGNoIGV2ZW50IG9jY3Vycy4gVGhlcmUgaXMgbm8gd2F5IHRvIGluY3JlYXNlIHRoZSByYXRlIHdoaWNoIGEgZmV0Y2gtZXZlbnQgb2NjdXJzIGFuZCB0aGlzIHBsdWdpbiBzZXRzIHRoZSByYXRlIHRvIHRoZSBtb3N0IGZyZXF1ZW50IHBvc3NpYmxlIHZhbHVlIG9mIFVJQXBwbGljYXRpb25CYWNrZ3JvdW5kRmV0Y2hJbnRlcnZhbE1pbmltdW0gLS0gaU9TIGRldGVybWluZXMgdGhlIHJhdGUgYXV0b21hdGljYWxseSBiYXNlZCB1cG9uIGRldmljZSB1c2FnZSBhbmQgdGltZS1vZi1kYXkgKGllOiBmZXRjaC1yYXRlIGlzIGFib3V0IH4xNW1pbiBkdXJpbmcgcHJpbWUtdGltZSBob3VyczsgbGVzcyBmcmVxdWVudGx5IHdoZW4gdGhlIHVzZXIgaXMgcHJlc3VtZWQgdG8gYmUgc2xlZXBpbmcsIGF0IDNhbSBmb3IgZXhhbXBsZSkuXG4gKiBGb3IgbW9yZSBkZXRhaWwsIHBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zaXN0b3Jzb2Z0L2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2hcbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYWNrZ3JvdW5kRmV0Y2gsIEJhY2tncm91bmRGZXRjaENvbmZpZyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFja2dyb3VuZC1mZXRjaC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhY2tncm91bmRGZXRjaDogQmFja2dyb3VuZEZldGNoKSB7XG4gKlxuICogICBjb25zdCBjb25maWc6IEJhY2tncm91bmRGZXRjaENvbmZpZyA9IHtcbiAqICAgICBzdG9wT25UZXJtaW5hdGU6IGZhbHNlLCAvLyBTZXQgdHJ1ZSB0byBjZWFzZSBiYWNrZ3JvdW5kLWZldGNoIGZyb20gb3BlcmF0aW5nIGFmdGVyIHVzZXIgXCJjbG9zZXNcIiB0aGUgYXBwLiBEZWZhdWx0cyB0byB0cnVlLlxuICogICB9XG4gKlxuICogICBiYWNrZ3JvdW5kRmV0Y2guY29uZmlndXJlKGNvbmZpZylcbiAqICAgICAgLnRoZW4oKCkgPT4ge1xuICogICAgICAgICAgY29uc29sZS5sb2coJ0JhY2tncm91bmQgRmV0Y2ggaW5pdGlhbGl6ZWQnKTtcbiAqXG4gKiAgICAgICAgICB0aGlzLmJhY2tncm91bmRGZXRjaC5maW5pc2goKTtcbiAqXG4gKiAgICAgIH0pXG4gKiAgICAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKCdFcnJvciBpbml0aWFsaXppbmcgYmFja2dyb3VuZCBmZXRjaCcsIGUpKTtcbiAqXG4gKiAgIC8vIFN0YXJ0IHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSS4gWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBiZSBleGVjdXRlZCBlYWNoIHRpbWUgYSBiYWNrZ3JvdW5kLWZldGNoIGV2ZW50IG9jY3Vycy4gTk9URSB0aGUgI2NvbmZpZ3VyZSBtZXRob2QgYXV0b21hdGljYWxseSBjYWxscyAjc3RhcnQuIFlvdSBkbyBub3QgaGF2ZSB0byBjYWxsIHRoaXMgbWV0aG9kIGFmdGVyIHlvdSAjY29uZmlndXJlIHRoZSBwbHVnaW5cbiAqICAgYmFja2dyb3VuZEZldGNoLnN0YXJ0KCk7XG4gKlxuICogICAvLyBTdG9wIHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSSBmcm9tIGZpcmluZyBmZXRjaCBldmVudHMuIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgbm8gbG9uZ2VyIGJlIGV4ZWN1dGVkLlxuICogICBiYWNrZ3JvdW5kRmV0Y2guc3RvcCgpO1xuICpcbiAqXG4gKiB9XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQmFja2dyb3VuZEZldGNoQ29uZmlnXG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JhY2tncm91bmRGZXRjaCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2gnLFxuICBwbHVnaW5SZWY6ICdCYWNrZ3JvdW5kRmV0Y2gnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zaXN0b3Jzb2Z0L2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2gnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRGZXRjaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIHBsdWdpbidzIGZldGNoIGNhbGxiYWNrRm5cbiAgICpcbiAgICogQHBhcmFtIHtCYWNrZ3JvdW5kRmV0Y2hDb25maWd9IGNvbmZpZyBDb25maWd1cmF0aW9uIGZvciBwbHVnaW5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgfSlcbiAgY29uZmlndXJlKGNvbmZpZzogQmFja2dyb3VuZEZldGNoQ29uZmlnKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJLlxuICAgKiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIGJlIGV4ZWN1dGVkIGVhY2ggdGltZSBhIGJhY2tncm91bmQtZmV0Y2ggZXZlbnQgb2NjdXJzLiBOT1RFIHRoZSAjY29uZmlndXJlIG1ldGhvZCBhdXRvbWF0aWNhbGx5IGNhbGxzICNzdGFydC4gWW91IGRvIG5vdCBoYXZlIHRvIGNhbGwgdGhpcyBtZXRob2QgYWZ0ZXIgeW91ICNjb25maWd1cmUgdGhlIHBsdWdpblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSSBmcm9tIGZpcmluZyBmZXRjaCBldmVudHMuIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgbm8gbG9uZ2VyIGJlIGV4ZWN1dGVkLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBNVVNUIGNhbGwgdGhpcyBtZXRob2QgaW4geW91ciBmZXRjaCBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgaW4gb3JkZXIgdG8gc2lnbmFsIHRvIGlPUyB0aGF0IHlvdXIgZmV0Y2ggYWN0aW9uIGlzIGNvbXBsZXRlLiBpT1MgcHJvdmlkZXMgb25seSAzMHMgb2YgYmFja2dyb3VuZC10aW1lIGZvciBhIGZldGNoLWV2ZW50IC0tIGlmIHlvdSBleGNlZWQgdGhpcyAzMHMsIGlPUyB3aWxsIGtpbGwgeW91ciBhcHAuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgZmluaXNoKHRhc2tJZDogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHN0YXR1cyBvZiB0aGUgYmFja2dyb3VuZC1mZXRjaFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==